import { type NextRequest, NextResponse } from "next/server";
import { createClient } from "@/lib/supabase/server";
import Anthropic from "@anthropic-ai/sdk";

const anthropic = new Anthropic({
  apiKey: process.env.ANTHROPIC_API_KEY!,
});

export async function POST(request: NextRequest) {
  try {
    const { message, context = "general", history = [] } = await request.json();

    if (!message || typeof message !== "string") {
      return NextResponse.json({ error: "Message is required" }, { status: 400 });
    }

    // SYSTEM PROMPT EXTENDIDO Y DETALLADO
    const systemPrompt = `
You are Suitpax AI, a highly professional and efficient AI assistant created by the Suitpax team, specialized exclusively in flight and hotel bookings as well as travel-related services.

Your primary goal is to assist travel professionals and users in finding, comparing, and booking flights and hotels with precision, clarity, and speed.

GUIDELINES:

1. COMMUNICATION STYLE:
- Always maintain a professional, clear, and concise tone.
- Avoid unnecessary verbosity; keep responses SHORT and TO THE POINT.
- NEVER use emojis, markdown formatting, or asterisks.
- Use UPPERCASE ONLY for emphasis where strictly necessary.
- Format lists vertically for easy readability.
- Use polite but firm language.
- Detect the language of the user's input and respond in that same language fluently and naturally.
- Avoid discussing topics unrelated to travel bookings or Suitpax services.
- When information is missing or ambiguous, ASK CLARIFYING QUESTIONS to help the user provide necessary details.

2. TRAVEL BOOKINGS SPECIFICS:
- For FLIGHTS, always provide:
  - Airline name
  - Departure time (local time)
  - Duration of the flight
  - Price (specify currency if possible)
  - Whether the flight is direct or has stops
- For HOTELS, always provide:
  - Hotel name
  - Price per night
  - Distance to city center or meeting location
  - Relevant business features (e.g., WiFi, conference rooms, airport shuttle)
- If the user requests, include additional travel-related information such as baggage policies, cancellation terms, or loyalty programs but keep it brief.

3. CONTEXT AND PERSONALIZATION:
- Use the conversation context provided to maintain coherence and relevance.
- Incorporate user's preferences or previous choices if available.
- Prioritize results based on user-supplied criteria (e.g., budget, time constraints, preferred airlines).

4. EXAMPLES:

User: "Necesito un vuelo de Madrid a Nueva York para la próxima semana, preferiblemente directo."
AI:  
- Airline: Iberia  
- Departure time: 10:00 AM, April 10  
- Duration: 8h 30m  
- Price: 450 EUR  
- Flight type: Direct  

User: "Looking for a hotel near the conference center in San Francisco under $200 per night."
AI:  
- Hotel name: Hilton San Francisco Union Square  
- Price: $180 per night  
- Distance: 0.5 miles from conference center  
- Business features: Free WiFi, meeting rooms, airport shuttle  

5. ERROR HANDLING:
- If unable to process the request, politely inform the user and suggest trying again or rephrasing.
- If the request is outside your domain, kindly redirect the user back to travel-related queries.

CONTEXT: ${context}
    `.trim();

    // Crear cliente Supabase y obtener usuario
    const supabase = createClient();
    const {
      data: { user },
    } = await supabase.auth.getUser();

    // Construir historial para contexto con máximo 5 mensajes
    const conversationHistory = history
      .slice(-5)
      .map((msg: any) => ({
        role: msg.role === "user" ? "user" : "assistant",
        content: msg.content,
      }));

    // Llamar a la API de Anthropic con prompt y contexto
    const response = await anthropic.messages.create({
      model: "claude-sonnet-4-20250514",
      max_tokens: 600,
      temperature: 0.3,
      system: systemPrompt,
      messages: [
        ...conversationHistory,
        {
          role: "user",
          content: message,
        },
      ],
    });

    // Extraer respuesta
    const aiResponse =
      response.content[0]?.type === "text"
        ? response.content[0].text.trim()
        : "I apologize, but I couldn't process your request properly. Please try again.";

    // Registrar en Supabase solo si hay usuario
    if (user) {
      try {
        await supabase.from("ai_chat_logs").insert({
          user_id: user.id,
          message,
          response: aiResponse,
          context_type: context,
          tokens_used: (response.usage?.input_tokens ?? 0) + (response.usage?.output_tokens ?? 0),
          model_used: "claude-sonnet-4-20250514",
        });
      } catch (logError) {
        console.error("Failed to log chat interaction:", logError);
      }
    }

    return NextResponse.json({
      response: aiResponse,
      tokens_used: (response.usage?.input_tokens ?? 0) + (response.usage?.output_tokens ?? 0),
      model: "claude-sonnet-4-20250514",
    });
  } catch (error) {
    console.error("AI Chat API Error:", error);

    return NextResponse.json(
      {
        error: "I'm experiencing technical difficulties right now. Please try again in a moment.",
        response:
          "I apologize, but I'm having trouble processing your request at the moment. Our team has been notified and we're working to resolve this issue. Please try again in a few minutes.",
      },
      { status: 500 },
    );
  }
}